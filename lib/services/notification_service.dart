// 1 : ƒêi b·ªô
// 2 : Ng·ªìi
// 3 : ƒê·ª©ng
// 4 : N·∫±m
// 5 : Ch·∫°y b·ªô
// 6 : ƒêi c·∫ßu thang
// 7 : ƒê·∫°p xe
// 8 : Ng√£
import 'package:firebase_database/firebase_database.dart';
import 'package:intl/intl.dart';
import '../models/activity_notification.dart';

class NotificationService {
  Future<List<ActivityNotification>> fetchNotificationsFromActivities(String userId) async {
    final ref = FirebaseDatabase.instance.ref("activity_records");
    final snapshot = await ref.get();

    List<ActivityNotification> notifications = [];

    if (snapshot.exists) {
      final data = Map<String, dynamic>.from(snapshot.value as Map);

      for (final entry in data.entries) {
        final record = Map<String, dynamic>.from(entry.value);

        if (record['user_id'] != userId) continue;

        final date = record['date'];
        final records = Map<String, dynamic>.from(record['records']);

        for (var item in records.values) {
          final activityType = item['activityType'];
          final startTime = DateTime.parse(item['start_time']);
          final endTime = DateTime.parse(item['end_time']);
          final duration = endTime.difference(startTime).inMinutes;

          ActivityNotification? notification;

          switch (activityType) {
            case 1: // ƒêi b·ªô
              notification = ActivityNotification(
                title: "üö∂ B·∫°n ƒë√£ ƒëi b·ªô",
                content: "ƒêi b·ªô t·ª´ ${DateFormat.Hm().format(startTime)} ƒë·∫øn ${DateFormat.Hm().format(endTime)} v√†o $date. Ti·∫øp t·ª•c v·∫≠n ƒë·ªông nh√©!",
                timestamp: startTime,
              );
              break;

            case 2: // Ng·ªìi
              if (duration >= 120) {
                notification = ActivityNotification(
                  title: '‚è≥ Ng·ªìi qu√° l√¢u!',
                  content: 'B·∫°n ƒë√£ ng·ªìi li√™n t·ª•c ${duration ~/ 60} gi·ªù v√†o $date. H√£y ƒë·ª©ng d·∫≠y v√† v·∫≠n ƒë·ªông nh·∫π nh√©!',
                  timestamp: startTime,
                );
              }
              break;

            case 3: // ƒê·ª©ng
              if (duration >= 30) {
                notification = ActivityNotification(
                  title: "üßç B·∫°n ƒë√£ ƒë·ª©ng kh√° l√¢u",
                  content: "B·∫°n ƒë√£ ƒë·ª©ng kho·∫£ng ${duration} ph√∫t v√†o $date. H√£y ngh·ªâ ng∆°i n·∫øu th·∫•y m·ªèi nh√©!",
                  timestamp: startTime,
                );
              }
              break;

            case 4: // N·∫±m
              if (duration >= 10 && duration <= 60) {
                notification = ActivityNotification(
                  title: "üõèÔ∏è Ngh·ªâ ng∆°i h·ª£p l√Ω",
                  content: "B·∫°n ƒë√£ n·∫±m ngh·ªâ ${duration} ph√∫t v√†o $date. H√£y ti·∫øp t·ª•c chƒÉm s√≥c s·ª©c kh·ªèe c·ªßa m√¨nh!",
                  timestamp: startTime,
                );
              }
              break;

            case 5: // Ch·∫°y b·ªô
              notification = ActivityNotification(
                title: "üèÉ Tuy·ªát v·ªùi! B·∫°n ƒë√£ ch·∫°y b·ªô",
                content: "Ch·∫°y t·ª´ ${DateFormat.Hm().format(startTime)} ƒë·∫øn ${DateFormat.Hm().format(endTime)} v√†o $date. Gi·ªØ v·ªØng phong ƒë·ªô nh√©!",
                timestamp: startTime,
              );
              break;

            case 6: // ƒêi c·∫ßu thang
              notification = ActivityNotification(
                title: "üßó B·∫°n th·∫≠t chƒÉm ch·ªâ!",
                content: "B·∫°n ƒë√£ leo c·∫ßu thang v√†o $date l√∫c ${DateFormat.Hm().format(startTime)}. ƒê√¢y l√† b√†i t·∫≠p tuy·ªát v·ªùi cho s·ª©c kh·ªèe!",
                timestamp: startTime,
              );
              break;

            case 7: // ƒê·∫°p xe
              notification = ActivityNotification(
                title: "üö¥ B·∫°n ƒë√£ ƒë·∫°p xe",
                content: "B·∫°n ƒë√£ ƒë·∫°p xe t·ª´ ${DateFormat.Hm().format(startTime)} ƒë·∫øn ${DateFormat.Hm().format(endTime)} v√†o $date. C·ªë g·∫Øng duy tr√¨ nh√©!",
                timestamp: startTime,
              );
              break;

            case 8: // Ng√£
              notification = ActivityNotification(
                title: "üö® C·∫£nh b√°o t√© ng√£!",
                content: "Ph√°t hi·ªán m·ªôt c√∫ ng√£ v√†o $date l√∫c ${DateFormat.Hm().format(startTime)}. H√£y ki·ªÉm tra t√¨nh tr·∫°ng c·ªßa b·∫°n.",
                timestamp: startTime,
              );
              break;
          }

          if (notification != null) {
            notifications.add(notification);
            print("[NOTIFY] ${notification.title} - ${notification.content}");
          }
        }
      }
    }

    // return notifications.reversed.toList();
    notifications.sort((a, b) => b.timestamp.compareTo(a.timestamp));
    return notifications;

  }
}
