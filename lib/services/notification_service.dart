// 1 : ƒêi b·ªô
// 2 : Ng·ªìi
// 3 : ƒê·ª©ng
// 4 : N·∫±m
// 5 : Ch·∫°y b·ªô
// 6 : ƒêi c·∫ßu thang
// 7 : ƒê·∫°p xe
// 8 : Ng√£
import 'package:firebase_database/firebase_database.dart';
import 'package:intl/intl.dart';
import '../models/activity_notification.dart';

class NotificationService {
  //handleGroup() x·ª≠ l√Ω m·ªói chu·ªói li√™n t·ª•c (g·ªôp nhi·ªÅu record)
  //if (start.difference(groupEnd!).inSeconds <= 20) cho ph√©p 2 record c√°ch nhau t·ªëi ƒëa 20s v·∫´n t√≠nh l√† li√™n t·ª•c
  Future<List<ActivityNotification>> fetchNotificationsFromActivities(String userId) async {
    final ref = FirebaseDatabase.instance.ref("activity_records");
    final snapshot = await ref.get();

    List<ActivityNotification> notifications = [];

    if (!snapshot.exists) return notifications;

    final data = Map<String, dynamic>.from(snapshot.value as Map);

    for (final entry in data.entries) {
      final record = Map<String, dynamic>.from(entry.value);

      if (record['user_id'] != userId) continue;

      final date = record['date'];
      final recordList = List<Map<dynamic, dynamic>>.from(record['records']);

      // S·∫Øp x·∫øp theo th·ªùi gian b·∫Øt ƒë·∫ßu
      recordList.sort((a, b) => DateTime.parse(a['start_time']).compareTo(DateTime.parse(b['start_time'])));

      // Gom c√°c record li√™n ti·∫øp c√πng activityType
      int? currentActivity;
      DateTime? groupStart;
      DateTime? groupEnd;

      void handleGroup() {
        if (currentActivity == null || groupStart == null || groupEnd == null) return;
        final duration = groupEnd!.difference(groupStart!).inMinutes;

        ActivityNotification? notification;

        switch (currentActivity) {
          case 1:
            notification = ActivityNotification(
              title: "üö∂ B·∫°n ƒë√£ ƒëi b·ªô",
              content: "T·ª´ ${DateFormat.Hm().format(groupStart!)} ƒë·∫øn ${DateFormat.Hm().format(groupEnd!)} v√†o $date. Ti·∫øp t·ª•c v·∫≠n ƒë·ªông nh√©!",
              timestamp: groupStart!,
            );
            break;
          case 2:
            if (duration >= 120) {
              notification = ActivityNotification(
                title: '‚è≥ Ng·ªìi qu√° l√¢u!',
                content: 'B·∫°n ƒë√£ ng·ªìi li√™n t·ª•c ${duration ~/ 60} gi·ªù v√†o $date. H√£y ƒë·ª©ng d·∫≠y v√† v·∫≠n ƒë·ªông nh·∫π nh√©!',
                timestamp: groupStart!,
              );
            }
            break;
          case 3:
            if (duration >= 30) {
              notification = ActivityNotification(
                title: "üßç B·∫°n ƒë√£ ƒë·ª©ng kh√° l√¢u",
                content: "B·∫°n ƒë√£ ƒë·ª©ng kho·∫£ng ${duration} ph√∫t v√†o $date. H√£y ngh·ªâ ng∆°i n·∫øu th·∫•y m·ªèi nh√©!",
                timestamp: groupStart!,
              );
            }
            break;
          case 4:
            if (duration >= 10 && duration <= 60) {
              notification = ActivityNotification(
                title: "üõèÔ∏è Ngh·ªâ ng∆°i h·ª£p l√Ω",
                content: "B·∫°n ƒë√£ n·∫±m ngh·ªâ ${duration} ph√∫t v√†o $date. H√£y ti·∫øp t·ª•c chƒÉm s√≥c s·ª©c kh·ªèe c·ªßa m√¨nh!",
                timestamp: groupStart!,
              );
            }
            break;
          case 5:
            notification = ActivityNotification(
              title: "üèÉ Tuy·ªát v·ªùi! B·∫°n ƒë√£ ch·∫°y b·ªô",
              content: "Ch·∫°y t·ª´ ${DateFormat.Hm().format(groupStart!)} ƒë·∫øn ${DateFormat.Hm().format(groupEnd!)} v√†o $date. Gi·ªØ v·ªØng phong ƒë·ªô nh√©!",
              timestamp: groupStart!,
            );
            break;
          case 6:
            notification = ActivityNotification(
              title: "üßó B·∫°n th·∫≠t chƒÉm ch·ªâ!",
              content: "B·∫°n ƒë√£ leo c·∫ßu thang v√†o $date l√∫c ${DateFormat.Hm().format(groupStart!)}. ƒê√¢y l√† b√†i t·∫≠p tuy·ªát v·ªùi cho s·ª©c kh·ªèe!",
              timestamp: groupStart!,
            );
            break;
          case 7:
            notification = ActivityNotification(
              title: "üö¥ B·∫°n ƒë√£ ƒë·∫°p xe",
              content: "T·ª´ ${DateFormat.Hm().format(groupStart!)} ƒë·∫øn ${DateFormat.Hm().format(groupEnd!)} v√†o $date. C·ªë g·∫Øng duy tr√¨ nh√©!",
              timestamp: groupStart!,
            );
            break;
          case 8:
            notification = ActivityNotification(
              title: "üö® C·∫£nh b√°o t√© ng√£!",
              content: "Ph√°t hi·ªán m·ªôt c√∫ ng√£ v√†o $date l√∫c ${DateFormat.Hm().format(groupStart!)}. H√£y ki·ªÉm tra t√¨nh tr·∫°ng c·ªßa b·∫°n.",
              timestamp: groupStart!,
            );
            break;
        }

        if (notification != null) {
          notifications.add(notification);
          print("[NOTIFY] ${notification.title} - ${notification.content}");
        }

        // Reset
        currentActivity = null;
        groupStart = null;
        groupEnd = null;
      }

      for (var item in recordList) {
        final activity = int.tryParse(item['activityType'].toString());
        final start = DateTime.parse(item['start_time']);
        final end = DateTime.parse(item['end_time']);

        if (currentActivity == null) {
          // B·∫Øt ƒë·∫ßu group m·ªõi
          currentActivity = activity;
          groupStart = start;
          groupEnd = end;
        } else if (activity == currentActivity && start.difference(groupEnd!).inSeconds <= 20) {
          // Ti·∫øp t·ª•c chu·ªói li√™n t·ª•c (ch·∫•p nh·∫≠n 10s kho·∫£ng c√°ch, t·ªëi ƒëa 20s)
          groupEnd = end;
        } else {
          // K·∫øt th√∫c chu·ªói hi·ªán t·∫°i, x·ª≠ l√Ω, r·ªìi b·∫Øt ƒë·∫ßu chu·ªói m·ªõi
          handleGroup();
          currentActivity = activity;
          groupStart = start;
          groupEnd = end;
        }
      }

      // X·ª≠ l√Ω chu·ªói cu·ªëi c√πng
      handleGroup();
    }

    notifications.sort((a, b) => b.timestamp.compareTo(a.timestamp));
    return notifications;
  }

}
